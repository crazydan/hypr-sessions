[project]
name = "hypr-sessions"
version = "0.1.0"
description = "A Hyprland session manager"
readme = "README.md"
requires-python = ">=3.13"

dependencies = [
    "rich>=14.1.0",
    "typer>=0.17.3",
    "verboselogs>=1.7",
]

[dependency-groups]
dev = [
    "invoke>=2.2.0",
    "pre-commit>=4.3.0",
    "ruff>=0.12.11",
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
]

[build-system]
requires = ["hatchling>=1.21"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/hypr"]

[project.scripts]
hypr-sessions = "hypr.sessions.cli:main"

[tool.ruff]
# Match runtime
target-version = "py313"

# Hard wrap column for both lint and formatter
line-length = 120

# Where your code lives (helps import sorting & first-party detection)
src = ["src", "tests"]

# Ignore folders
extend-exclude = [".venv", "build", "dist", ".mypy_cache", ".ruff_cache"]

[tool.ruff.lint]
# Core sets most teams use: pycodestyle/pyflakes/warnings/imports/modernizations/bugbear/etc.
select = [
  "E",   # pycodestyle (incl. E501: line too long)
  "F",   # pyflakes
  "W",   # warnings
  "I",   # isort (import sorting)
  "UP",  # pyupgrade (modernize syntax)
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "SIM", # flake8-simplify
  "PT",  # flake8-pytest-style (if you use pytest)
  "RET", # flake8-return
  "ARG", # flake8-unused-arguments
  "PL",  # Pylint (subset)
  "RUF"  # Ruff-specific rules
]
ignore = []


# Enable fixing from the command palette / on save
fixable = ["ALL"]
unfixable = []

# McCabe complexity guard (optional)
[tool.ruff.lint.mccabe]
max-complexity = 10

# Keep imports grouped correctly
[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["hypr"]

[tool.ruff.format]
# Make Ruff act like a formatter too (Black-ish)
docstring-code-format = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
